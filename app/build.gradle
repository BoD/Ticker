apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
if (buildProperties.enableFabric.toBoolean()) apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion versions.build.compileSdk

    defaultConfig {
        applicationId 'org.jraf.android.ticker'
        minSdkVersion versions.build.minSdk
        targetSdkVersion versions.build.targetSdk
        versionCode buildNumber
        versionName buildProperties.versionName

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'
        // For now we enable debug logs all the configs
        buildConfigField 'boolean', 'DEBUG_LOGS', 'true'

        resConfigs 'en', 'fr'

        // Useful for api keys in the manifest (Maps, Crashlytics, ...)
        manifestPlaceholders = buildProperties

        // More api keys
        resValue 'string', 'apiKeyTwitterOauthConsumerKey', buildProperties.apiKeyTwitterOauthConsumerKey
        resValue 'string', 'apiKeyTwitterOauthConsumerSecret', buildProperties.apiKeyTwitterOauthConsumerSecret
        resValue 'string', 'apiKeyTwitterOauthAccessToken', buildProperties.apiKeyTwitterOauthAccessToken
        resValue 'string', 'apiKeyTwitterOauthAccessTokenSecret', buildProperties.apiKeyTwitterOauthAccessTokenSecret
        resValue 'string', 'apiKeyForecastIo', buildProperties.apiKeyForecastIo

        // Setting this to false enables the png generation at buildtime
        // (see http://android-developers.blogspot.fr/2016/02/android-support-library-232.html)
        vectorDrawables.useSupportLibrary = false

        // Multidex :(
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(buildProperties.signingStoreFile)
            storePassword buildProperties.signingStorePassword
            keyAlias buildProperties.signingKeyAlias
            keyPassword buildProperties.signingKeyPassword
        }
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'GIT_SHA1', "\"dev\""
            buildConfigField 'String', 'BUILD_DATE', "\"dev\""
            buildConfigField 'boolean', 'CRASH_REPORT', 'false'
        }

        release {
            buildConfigField 'String', 'GIT_SHA1', "\"${gitSha1}\""
            buildConfigField 'String', 'BUILD_DATE', "\"${buildDate}\""
            buildConfigField 'boolean', 'CRASH_REPORT', 'true'

            // XXX Proguard is completely disabled for now as I can't find rules that work
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError true
        textReport true
        ignoreWarnings true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    packagingOptions {
        pickFirst "META-INF/io.netty.versions.properties"
        pickFirst "META-INF/INDEX.LIST"
    }
}

android.applicationVariants.all { variant ->
    // Create new copy tasks, for release builds
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            def outputFile = file("build/outputs/apk/${variant.flavorName}/release/$output.outputFileName")
            def apkName = "${globalProjectName}-${project.name}-${android.defaultConfig.versionCode}-${variant.flavorName}-signed.apk"

            // Copy the apk to the 'etc' folder
            def copyApkToEtc = tasks.create("copy${variant.name.capitalize()}ApkToEtc", Copy)
            copyApkToEtc.from(outputFile)
            copyApkToEtc.into('../etc/apk')
            copyApkToEtc.rename output.outputFileName, apkName

            // Copy the apk to the deploy folder
            def deployFolder = "${buildProperties.deployFolder}/$globalProjectName/$buildNumber"
            def copyApkToDeploy = tasks.create("copy${variant.name.capitalize()}ApkToDeploy", Copy)
            copyApkToDeploy.from(outputFile)
            copyApkToDeploy.into(deployFolder)
            copyApkToDeploy.rename output.outputFileName, apkName

            // Make the copy tasks run after the assemble tasks of the variant
            variant.assembleProvider.get().finalizedBy(copyApkToEtc, copyApkToDeploy)
        }
    }
}

dependencies {
    // Tests
    androidTestImplementation("androidx.test.espresso:espresso-core:$versions.testing.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "junit:junit:$versions.testing.junit"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxKotlin"

    // Support library
    implementation "androidx.appcompat:appcompat:$versions.androidXAppcompat"
    implementation "com.google.android.material:material:$versions.material"
    implementation "androidx.emoji:emoji-bundled:$versions.androidXEmoji"
    implementation "androidx.multidex:multidex:$versions.androidXMultidex"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidXConstraintLayout"

    // Fabric / Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics@aar") {
        transitive = true
    }

    // JRAF
    implementation "org.jraf:kprefs:$versions.kprefs"
    implementation 'com.github.BoD:jraf-android-util:-SNAPSHOT'
//    implementation 'org.jraf:jraf-android-util:1.0.0'

    // Libticker
    implementation("org.jraf:libticker-core:$versions.libticker")
    implementation("org.jraf:libticker-plugins:$versions.libticker")
    implementation("org.jraf:libticker-httpconf:$versions.libticker")

    // Klaxon
    implementation "com.beust:klaxon:$versions.klaxon"

    // Slf4j
    implementation "org.slf4j:slf4j-android:$versions.slf4j"

    // Glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"

    // Sunrise/sunset
    implementation "ca.rmen:lib-sunrise-sunset:$versions.sunriseSunset"

    // CameraX
    implementation "androidx.camera:camera-core:$versions.cameraX"
    implementation "androidx.camera:camera-camera2:$versions.cameraX"
}

// Run './gradlew countReleaseDexMethods' to see dex methods count
dexcount {
    runOnEachPackage = false
}
