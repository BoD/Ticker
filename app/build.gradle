apply plugin: 'com.android.application'
if (buildProperties.enableFabric.toBoolean()) apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId 'org.jraf.android.ticker'
        minSdkVersion 14
        targetSdkVersion versions.targetSdk
        versionCode buildNumber
        versionName buildProperties.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField 'String', 'GIT_SHA1', "\"${gitSha1}\""
        buildConfigField 'String', 'BUILD_DATE', "\"${buildDate}\""
        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'

        resConfigs 'en', 'fr'

        // Useful for api keys in the manifest (Maps, Crashlytics, ...)
        manifestPlaceholders = buildProperties

        // More api keys
        resValue 'string', 'apiKeyTwitterOauthConsumerKey', buildProperties.apiKeyTwitterOauthConsumerKey
        resValue 'string', 'apiKeyTwitterOauthConsumerSecret', buildProperties.apiKeyTwitterOauthConsumerSecret
        resValue 'string', 'apiKeyTwitterOauthAccessToken', buildProperties.apiKeyTwitterOauthAccessToken
        resValue 'string', 'apiKeyTwitterOauthAccessTokenSecret', buildProperties.apiKeyTwitterOauthAccessTokenSecret
        resValue 'string', 'apiKeyForecastIo', buildProperties.apiKeyForecastIo

        // Setting this to false enables the png generation at buildtime
        // (see http://android-developers.blogspot.fr/2016/02/android-support-library-232.html)
        vectorDrawables.useSupportLibrary = false

    }

    signingConfigs {
        release {
            storeFile file(buildProperties.signingStoreFile)
            storePassword buildProperties.signingStorePassword
            keyAlias buildProperties.signingKeyAlias
            keyPassword buildProperties.signingKeyPassword
        }
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'CRASH_REPORT', 'false'
        }

        release {
            buildConfigField 'boolean', 'CRASH_REPORT', 'true'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError true
        textReport true
        ignoreWarnings true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

android.applicationVariants.all { variant ->
    // Create new copy tasks, for release builds
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            def apkName = "${globalProjectName}-${project.name}-${android.defaultConfig.versionCode}-${variant.flavorName}-signed.apk"

            // Copy the apk to the 'etc' folder
            def copyApkToEtc = tasks.create("copy${variant.name.capitalize()}ApkToEtc", Copy)
            copyApkToEtc.from(output.outputFile)
            copyApkToEtc.into('../etc/apk')
            copyApkToEtc.rename output.outputFile.name, apkName

            // Copy the apk to the deploy folder
            def copyApkToDeploy = tasks.create("copy${variant.name.capitalize()}ApkToDeploy", Copy)
            copyApkToDeploy.from(output.outputFile)
            copyApkToDeploy.into(buildProperties.deployFolder)
            copyApkToDeploy.rename output.outputFile.name, apkName

            // Make the copy tasks run after the assemble tasks of the variant
            variant.assemble.finalizedBy(copyApkToEtc, copyApkToDeploy)
        }
    }
}

dependencies {
    androidTestCompile("com.android.support.test.espresso:espresso-core:$versions.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:$versions.junit"

    compile "com.android.support:appcompat-v7:$versions.supportLibrary"
    compile "com.android.support:design:$versions.supportLibrary"
    compile "com.google.android.gms:play-services-location:$versions.playServices"
    compile("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics@aar") { transitive = true }
    compile 'com.github.BoD:jraf-android-util:-SNAPSHOT'
    kapt "org.jraf:prefs-compiler:$versions.prefs"
    compile "org.jraf:prefs:$versions.prefs"
    compile "org.twitter4j:twitter4j-core:$versions.twitter4j"
    compile "com.github.dvdme:ForecastIOLib:$versions.forecastIo"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    compile "ca.rmen:lib-sunrise-sunset:$versions.sunriseSunset"
    compile "ca.rmen:lib-french-revolutionary-calendar:$versions.libFrc"

    // Necessary to have Kotlin and dataBinding at the same time
    kapt "com.android.databinding:compiler:$versions.androidGradlePlugin"
}

kapt {
    generateStubs = true
}